# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1StNqxeWCCkdcg0sV2BuJbu32NVFdBcpV
"""
## Estudos sobre Machine Learning voltados para Análise de Sentimentos ##

import nltk
import re
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.model_selection import cross_val_predict
##imports das principais bibliotecas para analise de dados

dataset = pd.read_csv('https://raw.githubusercontent.com/minerandodados/mdrepo/master/Tweets_Mg.csv')
dataset.count()
##Leitura dos dados apresentados em CSV, feita pela biblioteca Pandas


tweets = dataset['Text'].values
classes = dataset['Classificacao'].values
##Separação dos valores a serem classificados

print(tweets) ##teste! :D

vectorizer = CountVectorizer(analyzer="word")
freq_tweets = vectorizer.fit_transform(tweets)
modelo = MultinomialNB()
modelo.fit(freq_tweets,classes)
##Separação e aprendizado da maquina

testes = ['Esse governo está no início, vamos ver o que vai dar',
         'Estou muito feliz com o governo de Minas esse ano',
         'O estado de Minas Gerais decretou calamidade financeira!!!',
         'A segurança desse país está deixando a desejar',
         'O governador de Minas é do PT']
##Dados para treinamento do algoritimo

freq_testes = vectorizer.transform(testes)
modelo.predict(freq_testes)
##Reorganização dos dados e a predição das estimativas

resultados = cross_val_predict(modelo, freq_tweets, classes, cv=10)

metrics.accuracy_score(classes,resultados)
##Retorno da acertividade do algoritimo

sentimento=['Positivo','Negativo','Neutro']
print (metrics.classification_report(classes,resultados,sentimento),'')
##Classificação com base nas disposição dos dados nas colunas

print (pd.crosstab(classes, resultados, rownames=['Real'], colnames=['Predito'], margins=True), '')
##Classificação com base nas disposição dos dados nas colunas

vectorizer = CountVectorizer(ngram_range=(1,2))
freq_tweets = vectorizer.fit_transform(tweets)
modelo = MultinomialNB()
modelo.fit(freq_tweets,classes)
##Novo aprendizado

resultados = cross_val_predict(modelo, freq_tweets, classes, cv=10)
metrics.accuracy_score(classes,resultados)
##Nova acurácia da leitura

sentimento=['Positivo','Negativo','Neutro']
print (metrics.classification_report(classes,resultados,sentimento))


print (pd.crosstab(classes, resultados, rownames=['Real'], colnames=['Predito'], margins=True))